Yagshi's SC61860 Assembler  "YASM61860"

■■ ようこそ！ハイテクとローテクの交錯する世界へ！ ■■

あなたが今手にしたのは現代の超強力な計算機を使うことができる  
大古の計算機のための開発環境です。便利な東京湾アクアラインを
横目に貸し切りの超豪華客船をオールで漕いで川崎から木更津まで
優雅なクルージングを楽しむ、そんな感覚をお楽しみ下さい。


//
//  0.  概要
//

YASM61860(以下 YASM)はシャープ旧ポコケンに搭載されている
8bit CPU SC61860 ようのアセンブラです。特徴は次のとおりです。

☆ perl で書かれているので多くのプラットホームで動作可能
☆ オブジェクトファイルの代わりに機械語ダンプリストを出力！
☆ 何と CLOADM 準拠の wav ファイルが出力可能！！

//
//  1.  使用方法
//

まず perl ver.5 以降が必要です(たぶん)。YASM の使い方は
基本的には

perl yasm.pl [source]

です。sh,csh 系のシェルの場合は実行属性をつけて直接、

yasm.pl [source]

で構いません。(yasm.pl の一行目はみなさんの環境に合わせて
編集して下さい。) [source] は本アセンブラでアセンブルしたい
アセンブリ言語のソースファイルで、ファイル名が .s か .asmで
終わっている必要があります。指定しない場合は標準入力から読み
込みます。2パスのアセンブルが終了すると、特に指定がなければ
標準出力にダンプリスト(!)を出力します。(8バイト毎にチェック
サムまで表示します。いやぁ〜、いたれり、つくせり、ですね!)

出力ファイルなどを陽に指定したい場合はスイッチを用いて下さい。
書式は

yasm [switches] [source]

となります。(現バージョンでは [switches] と [source] の順序に
制限はありません。) スイッチは以下のものが使えます。

【switches】

  -d dumplist  dumplist で指定したファイルにダンプリストを
               出力します。省略時は標準出力に出力します。
  -w wavfile   wavfile で指定したファイルに CLOADM ようの
               wavファイルを出力します。省略時は出力しません。
  -old         PC-1245/125x 等の旧機種ようスイッチです。wav
               ファイル生成時のみに影響します。

例)
    yasm.pl -d dump.txt -w csavem.wav source.s


//
//  2.  YASM アセンブリ言語マニュアル
//

2.1  基本構造

基本的にシャープ準拠(?)のアセンブリ言語を使います。行単位に
命令を記述して下さい。一行は

ラベル:  ニーモニック  オペランド  #コメント

の4つの部分からなっており、各部分は1つ以上の[TAB]かスペースで
区切る必要があります。それぞれ省略は可能ですが、順番はこのとおり
である必要があります。それぞれについて説明します。

---- ラベル ----
アルファベットと数字からなる任意の文字列です。大文字、小文字を
区別します。定義は、行の始めに書き直後に:(コロン)をつけるか
後で解説する equ 疑似命令を使うことで行います。

---- ニーモニック ----
工学社の『ポケコンマシン語入門』を見て作ったので、基本的に
それに従います。大文字、小文字どちらでも構いません。未定義命令
(隠し命令)にも一部対応しています。

---- オペランド ----
四則演算、カッコ、論理積(&)、論理和(|)、排他的論理和(^)、
シフト演算子(<<,>>)を用いた計算式を使えます。優先順位は
C 処理系といっしょです。リテラルとして使えるものは10進定数、
16進定数($で始まり大文字小文字は区別しません。)、ラベル、
文字(列)定数です。文字(列)定数とは ' で囲まれた任意の文字列で、
例えば 'abc' の場合、$616263 = 6382179 になります。
 ¥(バックスラッシュ)をエスケープように使えます。
バイトオーダはビッグエンディアン(モトローラ式。ってゆーか
SC61860式。)です。


例) -$Abc + 100*(label-'¥'')/ 'str¥¥' & $f000 >> 8

---- コメント ----
# または ; から行末までがコメントとして無視されます。文字列定数
中でこれらのキャラクタを用いたい場合は必ず¥を前置して下さい。



2.2  文法上の注意事項

ジャンプ系の命令( JR* JP* LOOP )のオペランドは『飛びたいアドレス』
を書いて下さい。相対ジャンプの場合も相対値を書くのではなく、
『飛びたいアドレス』です。(もちろんラベルで構いません。)

case 命令(あるいは sett/jst 命令)は綺麗な書き方を思いつかなかった
ので、オペランドは db や dw 疑似命令を用いて書いて下さい。


2.3  疑似命令

本バージョンでインプリメントされている疑似命令を順に解説します。

---- org ----
アセンブリ言語のソースのその位置のアドレスを定義します。
ラベルはつけられません。

例)
	org	$5000	# ここから $5000 番地
VRAM:	org	$2000	# エラー


---- equ ----
ラベルに値を設定します。ラベルには:(コロン)をつけても
つけなくても構いません。

例)
VRAM1:	EQU	$2000		# コロンはあっても
VRAM2	equ	VRAM+$40	#         なくてもよい


---- db ----
バイト列を配置します。,(カンマ)で区切ることで連続して
並べられます。

例)
	db	'H','e','l','l','o',',',$0c,$0d


---- dw ----
ワード(=2バイト)列を配置します。バイトオーダーはビッグ
エンディアンです。

例)
	dw	'Wo','rl','d!',$0c0d,0


---- ds ----
任意の1バイトを任意の数だけ連続して配置します。書式は
ds バイト数 [,データ] です。データは省略可能で、省略時は
0 とみなします。

例)
	ds	10,$ff		# $ff で 10バイト埋める
	ds	20		# 0 で 20バイト埋める




//
//  3.  その他、いろいろ
//

なんとなく作った SC61860 のアセンブラです。今(平成10年6月)さら
誰が使うのかなあ、とも思いましたがまあいいでしょう。なぜ作った
かというと、たまたま PC-1262 を手に入れたからです。

このアセンブラの最大の『売り』は何といっても wav ファイル生成
機能でしょう。カセット I/F をお持ちでない方も是非一度試して
みてください。この機能を実装するにあたり、『ポケコンマシン語
入門』を見たのですがいまいち情報不足で困りました。結局 O2 で
録音して波形エディタを使って解析しました。それなりに苦労したん
です。

プログラムのアドレスが分割されている場合、出力される wav ファ
イルはプログラムの最下位アドレス〜最上位アドレスまで、未定義
エリアを 00 で埋めたものになります。

あとバグがあったら是非ともバグレポート送って下さい。その際、
問題の起きたソースも添付していただけるとありがたいです。

perl で 1kb 以上のスクリプト書くのもアセンブラというものを作る
のも初めての経験ですので何かと至らないところがあると思います。
何かお気づきの点があったら何でも結構ですのでメイル下さるととても
嬉しいです。


----
ご意見・ご要望・バグレポート・苦情等は以下にお願い致します。

    mailto:  yagshi@ugsf.info
----

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
さあ、古き良き時代への旅の準備は半分終わりました。あとは
押し入れからポケコンを発掘し、CR-2032 を買ってくるだけです。
お持ちの方は是非『カセットインターフェイス CE-124』もご用意
下さい。SC61860の共にあらんことを！
■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
